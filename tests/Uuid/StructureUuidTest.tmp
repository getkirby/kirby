<?php

namespace Kirby\Uuid;

use Generator;
use Kirby\Cms\Structure;
use PHPUnit\Framework\Attributes\CoversClass;

#[CoversClass(StructureUuid::class)]
class StructureUuidTest extends TestCase
{
	public function testFieldToCollection(): void
	{
		$field     = $this->app->page('page-a')->authors();
		$structure = StructureUuid::fieldToCollection($field);
		$this->assertInstanceOf(Structure::class, $structure);
		$this->assertSame(2, $structure->count());
	}

	public function testFindByCache(): void
	{
		$struct = $this->app->page('page-a')->authors()->toStructure()->first();

		// not yet in cache
		$uuid  = new StructureUuid('struct://my-struct');
		$this->assertFalse($uuid->isCached());
		$this->assertNull($uuid->model(true));

		// fill cache
		$struct->uuid()->populate();

		// retrieve from cache
		$this->assertTrue($uuid->isCached());
		$this->assertTrue($struct->is($uuid->model(true)));
	}

	public function testFindByIndex(): void
	{
		$struct = $this->app->page('page-a')->authors()->toStructure()->first();
		$uuid   = new StructureUuid('struct://my-struct');
		$this->assertFalse($uuid->isCached());
		$this->assertNull($uuid->model(true));
		$this->assertTrue($struct->is($uuid->model()));
		$this->assertTrue($uuid->isCached());

		// not found
		$uuid = new StructureUuid('struct://does-not-exist');
		$this->assertNull($uuid->model());
	}

	public function testIndex(): void
	{
		$index = StructureUuid::index();
		$this->assertInstanceOf(Generator::class, $index);
		$this->assertInstanceOf(Structure::class, $index->current());
		$this->assertSame(2, iterator_count($index));
	}

	public function testValue(): void
	{
		$struct = $this->app->page('page-a')->authors()->toStructure()->first();
		$uuid   = $struct->uuid();
		$this->assertSame('page://my-page/authors/my-struct', $uuid->value());
	}
}
